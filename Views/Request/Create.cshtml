@model WebApplicationForWarehouseManagementOfOfficeSupplies.DTOs.CreateRequestViewModel

@{
    ViewData["Title"] = "Create Request";
}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1 d-flex align-items-center">
                        <i class="bi bi-cart-plus text-primary me-2"></i>
                        <span>Create New Request</span>
                    </h2>
                    <p class="text-muted mb-0">Select products and quantities to create a new order request</p>
                </div>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="#">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="#">Requests</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Create</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>

    <!-- Notifications -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    else if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Please correct the following errors:</strong>
            @Html.ValidationSummary(false, "", new { @class = "mb-0 mt-2 list-unstyled" })
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <!-- Search and Filter Card -->
        <div class="col-12">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white p-4 border-bottom-0">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-search text-primary me-2"></i>Find Products
                    </h5>
                </div>
                <div class="card-body p-4">
                    <form method="get" asp-action="Create" id="searchForm">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text bg-light">
                                        <i class="bi bi-search text-muted"></i>
                                    </span>
                                    <input type="text" name="searchTerm" class="form-control"
                                           placeholder="Search by Brand or Model"
                                           value="@Context.Request.Query["searchTerm"]" />
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="input-group">
                                    <span class="input-group-text bg-light">
                                        <i class="bi bi-tag text-muted"></i>
                                    </span>
                                    <select name="categoryId" class="form-select">
                                        <option value="">All Categories</option>
                                        @foreach (var category in Model.Categories)
                                        {
                                            if (Context.Request.Query["categoryId"] == category.Value)
                                            {
                                                <option value="@category.Value" selected>@category.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@category.Value">@category.Text</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="bi bi-search me-2"></i>Search
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <form asp-action="Create" method="post" id="requestForm">
        <div class="row">
            <!-- Products Card -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white p-4 border-bottom-0 d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-box-seam text-primary me-2"></i>Available Products
                        </h5>
                        <span class="badge bg-primary rounded-pill">@Model.RequestProducts.Count items</span>
                    </div>
                    <div class="card-body p-0">
                        @if (Model.RequestProducts.Count == 0)
                        {
                            <div class="text-center py-5">
                                <i class="bi bi-search display-1 text-muted"></i>
                                <h4 class="mt-3">No Products Found</h4>
                                <p class="text-muted">Try adjusting your search criteria or browse all products.</p>
                                <a href="@Url.Action("Create")" class="btn btn-outline-primary mt-2">
                                    <i class="bi bi-arrow-repeat me-1"></i>View All Products
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover align-middle mb-0" id="productsTable">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="ps-4">Product</th>
                                            <th>Location</th>
                                            <th>Price</th>
                                            <th class="text-end pe-4">Quantity</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < Model.RequestProducts.Count; i++)
                                        {
                                            <tr class="product-row" data-product-id="@Model.RequestProducts[i].ProductID">
                                                <td class="ps-4">
                                                    <div class="d-flex align-items-center">
                                                        <div class="bg-light rounded p-2 me-3">
                                                            <i class="bi bi-box text-primary fs-4"></i>
                                                        </div>
                                                        <div>
                                                            <div class="fw-medium">@Model.RequestProducts[i].ProductBrand</div>
                                                            <div class="text-muted">@Model.RequestProducts[i].ProductModel</div>

                                                            <input type="hidden" name="RequestProducts[@i].ProductBrand" value="@Model.RequestProducts[i].ProductBrand" />
                                                            <input type="hidden" name="RequestProducts[@i].ProductModel" value="@Model.RequestProducts[i].ProductModel" />
                                                            <input type="hidden" name="RequestProducts[@i].ProductID" value="@Model.RequestProducts[i].ProductID" />
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-light text-dark">
                                                        Section: @Model.RequestProducts[i].ProductSection
                                                    </span>
                                                    <span class="badge bg-light text-dark">
                                                        Row: @Model.RequestProducts[i].ProductRow
                                                    </span>

                                                    <input type="hidden" name="RequestProducts[@i].ProductRow" value="@Model.RequestProducts[i].ProductRow" />
                                                    <input type="hidden" name="RequestProducts[@i].ProductSection" value="@Model.RequestProducts[i].ProductSection" />
                                                </td>
                                                <td>
                                                    <div class="fw-bold text-primary">
                                                        @Model.RequestProducts[i].ProductPrice.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))
                                                    </div>
                                                    <input type="hidden" name="RequestProducts[@i].ProductPrice" value="@Model.RequestProducts[i].ProductPrice" />
                                                </td>
                                                <td class="text-end pe-4">
                                                    <div class="d-flex align-items-center justify-content-end">
                                                        <button type="button" class="btn btn-sm btn-outline-secondary quantity-decrease">
                                                            <i class="bi bi-dash"></i>
                                                        </button>
                                                        <input type="number" name="RequestProducts[@i].ProductQuantity"
                                                               class="form-control mx-2 quantity-input text-center"
                                                               style="max-width: 80px;"
                                                               value="0" min="0" max="100" />
                                                        <button type="button" class="btn btn-sm btn-outline-secondary quantity-increase">
                                                            <i class="bi bi-plus"></i>
                                                        </button>
                                                    </div>
                                                    <div class="mt-2 subtotal-display d-none text-success fw-medium">
                                                        Subtotal: <span class="subtotal-value">bgn 0.00</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Order Summary Card -->
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm mb-4 sticky-top" style="top: 20px; z-index: 100;">
                    <div class="card-header bg-white p-4 border-bottom-0">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-receipt text-primary me-2"></i>Order Summary
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        <div class="alert alert-info d-flex align-items-center mb-4">
                            <i class="bi bi-info-circle-fill me-2 fs-5"></i>
                            <div>
                                Select quantities for the products you want to request.
                            </div>
                        </div>

                        <!-- embed current discount level from DB -->
                        <div id="orderSummary" data-current-discount-level="@Model.CurrentDiscountLevel">
                            <div class="text-center py-4 empty-cart-message">
                                <i class="bi bi-cart text-muted fs-1"></i>
                                <p class="mt-3 mb-0">Your cart is empty</p>
                                <small class="text-muted">Add products by setting quantities above</small>
                            </div>

                            <div class="selected-items d-none">
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Selected Items:</span>
                                        <span class="fw-bold item-count">0</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Total Quantity:</span>
                                        <span class="fw-bold total-quantity">0</span>
                                    </div>
                                </div>

                                <hr />

                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">Subtotal:</span>
                                        <span class="fw-bold text-primary subtotal-amount">bgn 0.00</span>
                                    </div>
                                    <div class="d-flex justify-content-between mt-1">
                                        <span>Discount (<span class="discount-pct">0%</span>):</span>
                                        <span class="fw-bold text-danger discount-amount">- bgn 0.00</span>
                                    </div>
                                </div>

                                <hr />

                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">Total After Discount:</span>
                                        <span class="fw-bold text-primary final-amount">bgn 0.00</span>
                                    </div>
                                </div>

                                <div class="selected-products-list mt-4">
                                    <h6 class="mb-3">Selected Products:</h6>
                                    <ul class="list-group list-group-flush" id="selectedProductsList">
                                        <!-- Selected products will be listed here via JavaScript -->
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-white p-4 border-top-0">
                        <button type="submit" class="btn btn-primary w-100 py-2 submit-button" disabled>
                            <i class="bi bi-send me-2"></i>Submit Request
                        </button>
                        <button type="button" class="btn btn-outline-secondary w-100 mt-2" id="clearSelections">
                            <i class="bi bi-x-circle me-2"></i>Clear Selections
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmationModalLabel">
                    <i class="bi bi-check-circle me-2"></i>Confirm Request
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-4">
                    <i class="bi bi-cart-check display-1 text-primary"></i>
                </div>
                <p>You are about to submit a request for <span id="confirmItemCount" class="fw-bold">0</span> items with a total of <span id="confirmTotalAmount" class="fw-bold">bgn 0.00</span>.</p>
                <p class="mb-0">Are you sure you want to proceed?</p>
            </div>
            <div class="modal-footer border-top-0">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="confirmSubmit">
                    <i class="bi bi-check-lg me-2"></i>Confirm Request
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const currencySymbol = 'bgn ';
            const orderSummaryEl = document.getElementById('orderSummary');
            // read the DB‑stored discount level
            const discountLevel = parseInt(orderSummaryEl.dataset.currentDiscountLevel) || 0;

            const quantityInputs = document.querySelectorAll('.quantity-input');
            const increaseButtons = document.querySelectorAll('.quantity-increase');
            const decreaseButtons = document.querySelectorAll('.quantity-decrease');
            const submitButton = document.querySelector('.submit-button');
            const clearSelectionsButton = document.getElementById('clearSelections');
            const emptyCartMessage = document.querySelector('.empty-cart-message');
            const selectedItems = document.querySelector('.selected-items');
            const itemCountElement = document.querySelector('.item-count');
            const totalQuantityElement = document.querySelector('.total-quantity');
            const subtotalElement = document.querySelector('.subtotal-amount');
            const discountPctElem = document.querySelector('.discount-pct');
            const discountAmtElem = document.querySelector('.discount-amount');
            const finalAmountElem = document.querySelector('.final-amount');
            const selectedProductsList = document.getElementById('selectedProductsList');
            const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            const confirmItemCount = document.getElementById('confirmItemCount');
            const confirmTotalAmount = document.getElementById('confirmTotalAmount');
            const confirmSubmitButton = document.getElementById('confirmSubmit');
            const requestForm = document.getElementById('requestForm');
            const productRows = document.querySelectorAll('.product-row');

            // Load products & prices
            const products = [];
            productRows.forEach((row, i) => {
                let raw = row.querySelector('input[name^="RequestProducts"][name$="ProductPrice"]').value;
                raw = raw.replace(',', '.'); // normalize
                products.push({
                    price: parseFloat(raw) || 0,
                    brand: row.querySelector('input[name$="ProductBrand"]').value,
                    model: row.querySelector('input[name$="ProductModel"]').value
                });
            });

            function updateOrderSummary() {
                let itemCount = 0, totalQuantity = 0, subtotal = 0;
                const selected = [];

                quantityInputs.forEach((input, idx) => {
                    const qty = parseInt(input.value) || 0;
                    if (qty > 0) {
                        itemCount++;
                        totalQuantity += qty;
                        const p = products[idx];
                        const line = p.price * qty;
                        subtotal += line;
                        selected.push({ ...p, qty, line });

                        const disp = productRows[idx].querySelector('.subtotal-display');
                        const val = productRows[idx].querySelector('.subtotal-value');
                        disp.classList.remove('d-none');
                        val.textContent = currencySymbol + line.toFixed(2);
                    } else {
                        productRows[idx].querySelector('.subtotal-display').classList.add('d-none');
                    }
                });

                // use DB‑level for discount
                const pct = discountLevel * 0.025;
                const discount = subtotal * pct;
                const finalAmt = subtotal - discount;

                // update UI
                itemCountElement.textContent = itemCount;
                totalQuantityElement.textContent = totalQuantity;
                subtotalElement.textContent = currencySymbol + subtotal.toFixed(2);
                discountPctElem.textContent = (pct * 100).toFixed(1) + '%';
                discountAmtElem.textContent = '- ' + currencySymbol + discount.toFixed(2);
                finalAmountElem.textContent = currencySymbol + finalAmt.toFixed(2);

                selectedItems.classList[itemCount > 0 ? 'remove' : 'add']('d-none');
                emptyCartMessage.classList[itemCount > 0 ? 'add' : 'remove']('d-none');
                submitButton.disabled = itemCount === 0;

                selectedProductsList.innerHTML = '';
                selected.forEach(p => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item px-0';
                    li.innerHTML = `
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="fw-medium">${p.brand}</div>
                                        <div class="text-muted small">${p.model}</div>
                                        <div class="text-primary small">
                                            ${currencySymbol}${p.price.toFixed(2)} × ${p.qty}
                                        </div>
                                    </div>
                                    <div class="fw-bold">
                                        ${currencySymbol}${p.line.toFixed(2)}
                                    </div>
                                </div>`;
                    selectedProductsList.appendChild(li);
                });

                return { itemCount, subtotal, discount, finalAmt };
            }

            // attach handlers
            increaseButtons.forEach((b, i) => b.addEventListener('click', () => {
                quantityInputs[i].value = (parseInt(quantityInputs[i].value) || 0) + 1;
                updateOrderSummary();
            }));
            decreaseButtons.forEach((b, i) => b.addEventListener('click', () => {
                let v = parseInt(quantityInputs[i].value) || 0;
                if (v > 0) quantityInputs[i].value = --v;
                updateOrderSummary();
            }));
            quantityInputs.forEach(inp => inp.addEventListener('change', () => {
                if (isNaN(inp.value) || inp.value < 0) inp.value = 0;
                updateOrderSummary();
            }));
            clearSelectionsButton.addEventListener('click', () => {
                quantityInputs.forEach(i => i.value = 0);
                updateOrderSummary();
            });
            submitButton.addEventListener('click', e => {
                e.preventDefault();
                const sum = updateOrderSummary();
                confirmItemCount.textContent = sum.itemCount;
                confirmTotalAmount.textContent = currencySymbol + sum.finalAmt.toFixed(2);
                confirmationModal.show();
            });
            confirmSubmitButton.addEventListener('click', () => requestForm.submit());

            // initial call
            updateOrderSummary();
        });
    </script>
}

<style>
    .card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }

    .quantity-input::-webkit-inner-spin-button,
    .quantity-input::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .quantity-input {
        -moz-appearance: textfield;
    }

    .product-row:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }
</style>
