@model List<WebApplicationForWarehouseManagementOfOfficeSupplies.Models.Request>

@{
    ViewData["Title"] = "Order History";
    
    // Calculate summary statistics
    var totalRequests = Model.Count;
    var pendingRequests = Model.Count(r => r.Status == "Pending");
    var approvedRequests = Model.Count(r => r.Status == "Approved");
    var rejectedRequests = Model.Count(r => r.Status == "Rejected");
    var deliveredRequests = Model.Count(r => r.Status == "Delivered");
    
    // Get unique companies for filter
    var companies = Model.Select(r => r.Company?.CompanyName).Distinct().Where(c => c != null).OrderBy(c => c).ToList();
    
    // Get unique statuses for filter
    var statuses = Model.Select(r => r.Status).Distinct().Where(s => s != null).OrderBy(s => s).ToList();
}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-6">
            <h2 class="mb-1 d-flex align-items-center">
                <i class="bi bi-clock-history text-primary me-2"></i>
                <span>Order History</span>
            </h2>
            <p class="text-muted mb-0">View and manage all company order requests</p>
        </div>
        <div class="col-md-6">
            <div class="d-flex justify-content-md-end mt-3 mt-md-0">
                <button class="btn btn-outline-secondary me-2" id="btnExport">
                    <i class="bi bi-download me-1"></i> Export
                </button>
                <button class="btn btn-primary" id="btnRefresh">
                    <i class="bi bi-arrow-clockwise me-1"></i> Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-4 mb-4">
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle p-3 bg-primary bg-opacity-10 me-3">
                            <i class="bi bi-list-ul fs-4 text-primary"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Total Orders</h6>
                            <h3 class="mb-0 fw-bold">@totalRequests</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle p-3 bg-warning bg-opacity-10 me-3">
                            <i class="bi bi-hourglass-split fs-4 text-warning"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Pending</h6>
                            <h3 class="mb-0 fw-bold">@pendingRequests</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle p-3 bg-success bg-opacity-10 me-3">
                            <i class="bi bi-check-circle fs-4 text-success"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Approved/Delivered</h6>
                            <h3 class="mb-0 fw-bold">@(approvedRequests + deliveredRequests)</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle p-3 bg-danger bg-opacity-10 me-3">
                            <i class="bi bi-x-circle fs-4 text-danger"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Rejected</h6>
                            <h3 class="mb-0 fw-bold">@rejectedRequests</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Card -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-white p-4 border-bottom-0">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-funnel text-primary me-2"></i>Filters
                </h5>
                <button class="btn btn-sm btn-outline-secondary" id="btnClearFilters">
                    <i class="bi bi-x-lg me-1"></i>Clear Filters
                </button>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="mb-0">
                        <label for="searchInput" class="form-label">Search</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="searchInput" placeholder="Request ID, Company or User...">
                        </div>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="mb-0">
                        <label for="companyFilter" class="form-label">Company</label>
                        <select class="form-select" id="companyFilter">
                            <option value="">All Companies</option>
                            @foreach (var company in companies)
                            {
                                <option value="@company">@company</option>
                            }
                        </select>
                    </div>
                </div>
                
                <div class="col-md-2">
                    <div class="mb-0">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="">All Statuses</option>
                            @foreach (var status in statuses)
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="mb-0">
                        <label for="dateRangeFilter" class="form-label">Date Range</label>
                        <select class="form-select" id="dateRangeFilter">
                            <option value="">All Time</option>
                            <option value="today">Today</option>
                            <option value="yesterday">Yesterday</option>
                            <option value="week">This Week</option>
                            <option value="month">This Month</option>
                            <option value="quarter">This Quarter</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Orders Table Card -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white p-4 border-bottom-0">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-list-ul text-primary me-2"></i>Order Requests
                </h5>
                <span class="badge bg-primary rounded-pill" id="filteredCount">@totalRequests items</span>
            </div>
        </div>
        <div class="card-body p-0">
            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="mt-3">No Order Requests Found</h4>
                    <p class="text-muted">There are no order requests in the system yet.</p>
                    <a href="#" class="btn btn-primary mt-2">
                        <i class="bi bi-plus-lg me-1"></i>Create New Request
                    </a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0" id="ordersTable">
                        <thead class="table-light">
                            <tr>
                                <th class="ps-4">
                                    <div class="d-flex align-items-center">
                                        <span>Request ID</span>
                                        <i class="bi bi-arrow-down-up ms-1 text-muted sort-icon" data-sort="id"></i>
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center">
                                        <span>Company</span>
                                        <i class="bi bi-arrow-down-up ms-1 text-muted sort-icon" data-sort="company"></i>
                                    </div>
                                </th>
                                <th>Requested By</th>
                                <th>
                                    <div class="d-flex align-items-center">
                                        <span>Date</span>
                                        <i class="bi bi-arrow-down-up ms-1 text-muted sort-icon" data-sort="date"></i>
                                    </div>
                                </th>
                                <th>Status</th>
                                <th class="text-end pe-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var request in Model)
                            {
                                <tr class="order-row" 
                                    data-id="@request.RequestID" 
                                    data-company="@request.Company?.CompanyName" 
                                    data-user="@($"{request.User?.FirstName} {request.User?.LastName}")"
                                    data-date="@request.CreatedAt.ToString("yyyy-MM-dd")"
                                    data-status="@request.Status">
                                    <td class="ps-4">
                                        <span class="fw-medium">#@request.RequestID</span>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-light rounded-circle p-2 me-2">
                                                <i class="bi bi-building text-primary"></i>
                                            </div>
                                            <span>@request.Company?.CompanyName</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-light rounded-circle p-2 me-2">
                                                <i class="bi bi-person text-secondary"></i>
                                            </div>
                                            <span>@($"{request.User?.FirstName} {request.User?.LastName}")</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <div>@request.CreatedAt.ToString("MMM dd, yyyy")</div>
                                            <small class="text-muted">@request.CreatedAt.ToString("h:mm tt")</small>
                                        </div>
                                    </td>
                                    <td>
                                        @{
                                            string badgeClass = "bg-secondary";
                                            string statusIcon = "bi-question-circle";
                                            
                                            switch (request.Status?.ToLower())
                                            {
                                                case "pending":
                                                    badgeClass = "bg-warning text-dark";
                                                    statusIcon = "bi-hourglass-split";
                                                    break;
                                                case "approved":
                                                    badgeClass = "bg-success";
                                                    statusIcon = "bi-check-circle";
                                                    break;
                                                case "rejected":
                                                    badgeClass = "bg-danger";
                                                    statusIcon = "bi-x-circle";
                                                    break;
                                                case "delivered":
                                                    badgeClass = "bg-info";
                                                    statusIcon = "bi-truck";
                                                    break;
                                                case "processing":
                                                    badgeClass = "bg-primary";
                                                    statusIcon = "bi-gear";
                                                    break;
                                            }
                                        }
                                        <span class="badge @badgeClass">
                                            <i class="bi @statusIcon me-1"></i>@request.Status
                                        </span>
                                    </td>
                                    <td class="text-end pe-4">
                                        <div class="btn-group">
                                            <a asp-controller="PendingOrders" asp-action="Details" asp-route-id="@request.RequestID" 
                                               class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-eye me-1"></i>View
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split" 
                                                    data-bs-toggle="dropdown" aria-expanded="false">
                                                <span class="visually-hidden">Toggle Dropdown</span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end">
                                                <li>
                                                    <a class="dropdown-item" href="#">
                                                        <i class="bi bi-printer me-2"></i>Print
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="#">
                                                        <i class="bi bi-envelope me-2"></i>Email
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item text-danger" href="#">
                                                        <i class="bi bi-trash me-2"></i>Delete
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="card-footer bg-white p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="text-muted">Showing <span id="currentShowing">@Model.Count</span> of @totalRequests entries</span>
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center mb-0">
                                <li class="page-item disabled">
                                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                                </li>
                                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                <li class="page-item"><a class="page-link" href="#">2</a></li>
                                <li class="page-item"><a class="page-link" href="#">3</a></li>
                                <li class="page-item">
                                    <a class="page-link" href="#">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const searchInput = document.getElementById('searchInput');
            const companyFilter = document.getElementById('companyFilter');
            const statusFilter = document.getElementById('statusFilter');
            const dateRangeFilter = document.getElementById('dateRangeFilter');
            const clearFiltersBtn = document.getElementById('btnClearFilters');
            const refreshBtn = document.getElementById('btnRefresh');
            const exportBtn = document.getElementById('btnExport');
            const filteredCount = document.getElementById('filteredCount');
            const currentShowing = document.getElementById('currentShowing');
            const sortIcons = document.querySelectorAll('.sort-icon');
            const orderRows = document.querySelectorAll('.order-row');
            
            // Apply filters function
            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase();
                const companyTerm = companyFilter.value;
                const statusTerm = statusFilter.value;
                const dateTerm = dateRangeFilter.value;
                
                let visibleCount = 0;
                
                orderRows.forEach(row => {
                    const id = row.getAttribute('data-id').toLowerCase();
                    const company = row.getAttribute('data-company').toLowerCase();
                    const user = row.getAttribute('data-user').toLowerCase();
                    const status = row.getAttribute('data-status');
                    const date = new Date(row.getAttribute('data-date'));
                    
                    // Search filter
                    const matchesSearch = searchTerm === '' || 
                                         id.includes(searchTerm) || 
                                         company.includes(searchTerm) || 
                                         user.includes(searchTerm);
                    
                    // Company filter
                    const matchesCompany = companyTerm === '' || 
                                          company === companyTerm.toLowerCase();
                    
                    // Status filter
                    const matchesStatus = statusTerm === '' || 
                                         status === statusTerm;
                    
                    // Date filter
                    let matchesDate = true;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    if (dateTerm === 'today') {
                        const todayDate = new Date();
                        todayDate.setHours(0, 0, 0, 0);
                        matchesDate = date.getTime() === todayDate.getTime();
                    } else if (dateTerm === 'yesterday') {
                        const yesterday = new Date();
                        yesterday.setDate(yesterday.getDate() - 1);
                        yesterday.setHours(0, 0, 0, 0);
                        matchesDate = date.getTime() === yesterday.getTime();
                    } else if (dateTerm === 'week') {
                        const weekStart = new Date();
                        weekStart.setDate(weekStart.getDate() - weekStart.getDay());
                        weekStart.setHours(0, 0, 0, 0);
                        matchesDate = date >= weekStart;
                    } else if (dateTerm === 'month') {
                        const monthStart = new Date();
                        monthStart.setDate(1);
                        monthStart.setHours(0, 0, 0, 0);
                        matchesDate = date >= monthStart;
                    } else if (dateTerm === 'quarter') {
                        const quarterStart = new Date();
                        const currentMonth = quarterStart.getMonth();
                        const quarterMonth = Math.floor(currentMonth / 3) * 3;
                        quarterStart.setMonth(quarterMonth);
                        quarterStart.setDate(1);
                        quarterStart.setHours(0, 0, 0, 0);
                        matchesDate = date >= quarterStart;
                    }
                    
                    // Apply all filters
                    if (matchesSearch && matchesCompany && matchesStatus && matchesDate) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                // Update counters
                filteredCount.textContent = `${visibleCount} items`;
                if (currentShowing) {
                    currentShowing.textContent = visibleCount;
                }
            }
            
            // Clear filters function
            function clearFilters() {
                searchInput.value = '';
                companyFilter.value = '';
                statusFilter.value = '';
                dateRangeFilter.value = '';
                applyFilters();
            }
            
            // Refresh animation
            function refreshAnimation() {
                const icon = refreshBtn.querySelector('i');
                icon.classList.add('rotate-animation');
                setTimeout(() => {
                    icon.classList.remove('rotate-animation');
                }, 1000);
                
                // In a real app, you would reload data here
                // For demo, we'll just clear filters
                clearFilters();
            }
            
            // Sort functionality
            function sortTable(column) {
                const table = document.getElementById('ordersTable');
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));
                
                // Determine sort direction
                const currentIcon = document.querySelector(`.sort-icon[data-sort="${column}"]`);
                const isAscending = !currentIcon.classList.contains('active-asc');
                
                // Reset all sort icons
                sortIcons.forEach(icon => {
                    icon.classList.remove('active-asc', 'active-desc', 'text-primary');
                    icon.classList.add('text-muted');
                });
                
                // Set active sort icon
                currentIcon.classList.remove('text-muted');
                currentIcon.classList.add('text-primary');
                if (isAscending) {
                    currentIcon.classList.add('active-asc');
                } else {
                    currentIcon.classList.add('active-desc');
                }
                
                // Sort the rows
                rows.sort((a, b) => {
                    let valueA, valueB;
                    
                    if (column === 'id') {
                        valueA = parseInt(a.getAttribute('data-id'));
                        valueB = parseInt(b.getAttribute('data-id'));
                    } else if (column === 'company') {
                        valueA = a.getAttribute('data-company').toLowerCase();
                        valueB = b.getAttribute('data-company').toLowerCase();
                    } else if (column === 'date') {
                        valueA = new Date(a.getAttribute('data-date'));
                        valueB = new Date(b.getAttribute('data-date'));
                    }
                    
                    if (valueA < valueB) return isAscending ? -1 : 1;
                    if (valueA > valueB) return isAscending ? 1 : -1;
                    return 0;
                });
                
                // Reorder the rows
                rows.forEach(row => tbody.appendChild(row));
            }
            
            // Event listeners
            if (searchInput) searchInput.addEventListener('input', applyFilters);
            if (companyFilter) companyFilter.addEventListener('change', applyFilters);
            if (statusFilter) statusFilter.addEventListener('change', applyFilters);
            if (dateRangeFilter) dateRangeFilter.addEventListener('change', applyFilters);
            if (clearFiltersBtn) clearFiltersBtn.addEventListener('click', clearFilters);
            if (refreshBtn) refreshBtn.addEventListener('click', refreshAnimation);
            
            // Sort event listeners
            sortIcons.forEach(icon => {
                icon.addEventListener('click', function() {
                    const column = this.getAttribute('data-sort');
                    sortTable(column);
                });
            });
            
            // Export button (demo functionality)
            if (exportBtn) {
                exportBtn.addEventListener('click', function() {
                    alert('Export functionality would be implemented here.');
                });
            }
        });
    </script>
    
    <style>
        .bg-opacity-10 {
            opacity: 0.1;
        }
        
        .card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }
        
        .sort-icon {
            cursor: pointer;
            transition: color 0.2s ease;
        }
        
        .sort-icon:hover {
            color: #0d6efd !important;
        }
        
        .rotate-animation {
            animation: rotate 1s linear;
        }
        
        @@keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
}