@model WebApplicationForWarehouseManagementOfOfficeSupplies.DTOs.AdminOrderStatisticsViewModel

@{
    ViewData["Title"] = "Order Statistics";

    var stats = new[]
    {
        new { Title = "Total Orders", Value = Model.TotalOrders, Icon = "bi-list-ul", Color = "primary", Description = "All time" },
        new { Title = "Delivered", Value = Model.DeliveredOrders, Icon = "bi-check-circle", Color = "success", Description = "Completed orders" },
        new { Title = "Pending", Value = Model.PendingOrders, Icon = "bi-hourglass-split", Color = "warning", Description = "Awaiting processing" },
        new { Title = "Rejected", Value = Model.RejectedOrders, Icon = "bi-x-circle", Color = "danger", Description = "Cancelled orders" }
    };

    var timeStats = new[]
    {
        new { Title = "This Week", Value = Model.OrdersThisWeek, Icon = "bi-calendar-week", Color = "primary", Description = "Last 7 days" },
        new { Title = "This Month", Value = Model.OrdersThisMonth, Icon = "bi-calendar-month", Color = "primary", Description = "Last 30 days" },
        new { Title = "This Year", Value = Model.OrdersThisYear, Icon = "bi-calendar3", Color = "primary", Description = "Year to date" },
        new { Title = "In Progress", Value = Model.InProgressOrders, Icon = "bi-truck", Color = "info", Description = "Being processed" }
    };
}

<div class="container-fluid py-4">
    <!-- Dashboard Header -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-6">
            <h2 class="mb-1 d-flex align-items-center">
                <i class="bi bi-bar-chart-fill text-primary me-2"></i>
                <span>System-wide Order Statistics</span>
            </h2>
            <p class="text-muted mb-0">Comprehensive overview of all order activities and metrics</p>
        </div>
    </div>

    <!-- Main Stats Row -->
    <div class="row g-4 mb-4">
        @foreach (var stat in stats)
        {
            <div class="col-xl-3 col-md-6">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle p-3 bg-@stat.Color bg-opacity-10 me-3">
                                <i class="bi @stat.Icon text-@stat.Color fs-4"></i>
                            </div>
                            <div>
                                <h6 class="text-muted mb-1">@stat.Title</h6>
                                <h3 class="mb-0 fw-bold">@stat.Value</h3>
                                <small class="text-muted">@stat.Description</small>
                            </div>
                        </div>
                        @if (stat.Title == "Total Orders")
                        {
                            <div class="progress mt-3" style="height: 6px;">
                                <div class="progress-bar bg-primary" role="progressbar" style="width: 100%;" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                        else if (stat.Title == "Delivered")
                        {
                            <div class="progress mt-3" style="height: 6px;">
                                <div class="progress-bar bg-success" role="progressbar" 
                                     style="width: @(Model.TotalOrders > 0 ? (Model.DeliveredOrders * 100 / Model.TotalOrders) : 0)%;" 
                                     aria-valuenow="@(Model.TotalOrders > 0 ? (Model.DeliveredOrders * 100 / Model.TotalOrders) : 0)" 
                                     aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                        else if (stat.Title == "Pending")
                        {
                            <div class="progress mt-3" style="height: 6px;">
                                <div class="progress-bar bg-warning" role="progressbar" 
                                     style="width: @(Model.TotalOrders > 0 ? (Model.PendingOrders * 100 / Model.TotalOrders) : 0)%;" 
                                     aria-valuenow="@(Model.TotalOrders > 0 ? (Model.PendingOrders * 100 / Model.TotalOrders) : 0)" 
                                     aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                        else if (stat.Title == "Rejected")
                        {
                            <div class="progress mt-3" style="height: 6px;">
                                <div class="progress-bar bg-danger" role="progressbar" 
                                     style="width: @(Model.TotalOrders > 0 ? (Model.RejectedOrders * 100 / Model.TotalOrders) : 0)%;" 
                                     aria-valuenow="@(Model.TotalOrders > 0 ? (Model.RejectedOrders * 100 / Model.TotalOrders) : 0)" 
                                     aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Time-based Stats Row -->
    <div class="row g-4 mb-4">
        @foreach (var stat in timeStats)
        {
            <div class="col-xl-3 col-md-6">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle p-3 bg-@stat.Color bg-opacity-10 me-3">
                                <i class="bi @stat.Icon text-@stat.Color fs-4"></i>
                            </div>
                            <div>
                                <h6 class="text-muted mb-1">@stat.Title</h6>
                                <h3 class="mb-0 fw-bold">@stat.Value</h3>
                                <small class="text-muted">@stat.Description</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Charts Row -->
    <div class="row g-4 mb-4">
        <!-- Weekly Trend Chart -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white p-4 border-bottom-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up text-primary me-2"></i>Order Trends
                        </h5>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-secondary active" id="btnLineChart">Line</button>
                            <button type="button" class="btn btn-outline-secondary" id="btnBarChart">Bar</button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-4 pt-0">
                    <canvas id="weeklyTrendChart" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- Fulfillment Metrics -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white p-4 border-bottom-0">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock-history text-primary me-2"></i>Fulfillment Metrics
                    </h5>
                </div>
                <div class="card-body p-4 pt-0">
                    <div class="text-center mb-4">
                        <div class="display-4 fw-bold text-success mb-0">@Model.AvgFulfillmentTimeDays</div>
                        <p class="text-muted">Average Days to Fulfill</p>
                        
                        <div class="progress mt-3 mb-2" style="height: 8px;">
                            <div class="progress-bar bg-success" role="progressbar" style="width: 100%;" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <small class="text-muted">Order Placed</small>
                            <small class="text-muted">Delivered</small>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <h6 class="mb-3">Fulfillment Breakdown</h6>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Processing Time</span>
                            <span class="fw-bold">@(Math.Round(Model.AvgFulfillmentTimeDays * 0.3, 1)) days</span>
                        </div>
                        <div class="progress mb-3" style="height: 6px;">
                            <div class="progress-bar bg-info" role="progressbar" style="width: 30%;" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping Time</span>
                            <span class="fw-bold">@(Math.Round(Model.AvgFulfillmentTimeDays * 0.7, 1)) days</span>
                        </div>
                        <div class="progress" style="height: 6px;">
                            <div class="progress-bar bg-primary" role="progressbar" style="width: 70%;" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Company Stats Row -->
    <div class="row g-4">
        <!-- Top Companies by Orders -->
        <div class="col-lg-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white p-4 border-bottom-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-building text-primary me-2"></i>Top Companies by Orders
                        </h5>
                        <span class="badge bg-primary rounded-pill">Top @Model.TopCompaniesByOrders.Count()</span>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="ps-4">Company</th>
                                    <th class="text-end pe-4">Orders</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.TopCompaniesByOrders)
                                {
                                    <tr>
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-light rounded-circle p-2 me-3">
                                                    <i class="bi bi-building text-primary"></i>
                                                </div>
                                                <span>@item.Company</span>
                                            </div>
                                        </td>
                                        <td class="text-end pe-4">
                                            <span class="fw-bold">@item.Count</span>
                                            <div class="progress mt-1" style="height: 4px;">
                                                <div class="progress-bar bg-primary" role="progressbar" 
                                                     style="width: @(Model.TopCompaniesByOrders.Max(c => c.Count) > 0 ? (item.Count * 100 / Model.TopCompaniesByOrders.Max(c => c.Count)) : 0)%;" 
                                                     aria-valuenow="@(Model.TopCompaniesByOrders.Max(c => c.Count) > 0 ? (item.Count * 100 / Model.TopCompaniesByOrders.Max(c => c.Count)) : 0)" 
                                                     aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Top Companies by Spending -->
        <div class="col-lg-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white p-4 border-bottom-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-currency-dollar text-primary me-2"></i>Top Companies by Spending
                        </h5>
                        <span class="badge bg-success rounded-pill">Top @Model.TopCompaniesBySpending.Count()</span>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="ps-4">Company</th>
                                    <th class="text-end pe-4">Spending</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.TopCompaniesBySpending)
                                {
                                    <tr>
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center">
                                                <div class="bg-light rounded-circle p-2 me-3">
                                                    <i class="bi bi-building text-success"></i>
                                                </div>
                                                <span>@item.Company</span>
                                            </div>
                                        </td>
                                        <td class="text-end pe-4">
                                            <span class="fw-bold">@item.Total.ToString("C0")</span>
                                            <div class="progress mt-1" style="height: 4px;">
                                                <div class="progress-bar bg-success" role="progressbar" 
                                                     style="width: @(Model.TopCompaniesBySpending.Max(c => c.Total) > 0 ? (item.Total * 100 / Model.TopCompaniesBySpending.Max(c => c.Total)) : 0)%;" 
                                                     aria-valuenow="@(Model.TopCompaniesBySpending.Max(c => c.Total) > 0 ? (item.Total * 100 / Model.TopCompaniesBySpending.Max(c => c.Total)) : 0)" 
                                                     aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Chart data
            const labels = @Html.Raw(Json.Serialize(Model.WeeklyOrderTrend.Select(w => w.Week.ToString("MMM dd"))));
            const data = @Html.Raw(Json.Serialize(Model.WeeklyOrderTrend.Select(w => w.OrderCount)));
            
            // Create chart
            const ctx = document.getElementById('weeklyTrendChart').getContext('2d');
            let chartType = 'line';
            let chartInstance = createChart(ctx, chartType, labels, data);
            
            // Chart type toggle
            document.getElementById('btnLineChart').addEventListener('click', function() {
                if (chartType !== 'line') {
                    chartType = 'line';
                    chartInstance.destroy();
                    chartInstance = createChart(ctx, chartType, labels, data);
                    toggleActiveButton('btnLineChart', 'btnBarChart');
                }
            });
            
            document.getElementById('btnBarChart').addEventListener('click', function() {
                if (chartType !== 'bar') {
                    chartType = 'bar';
                    chartInstance.destroy();
                    chartInstance = createChart(ctx, chartType, labels, data);
                    toggleActiveButton('btnBarChart', 'btnLineChart');
                }
            });
            
            // Time period buttons (these would normally fetch new data)
            document.getElementById('btnWeek').addEventListener('click', function() {
                toggleActiveButton('btnWeek', 'btnMonth', 'btnYear');
            });
            
            document.getElementById('btnMonth').addEventListener('click', function() {
                toggleActiveButton('btnMonth', 'btnWeek', 'btnYear');
            });
            
            document.getElementById('btnYear').addEventListener('click', function() {
                toggleActiveButton('btnYear', 'btnWeek', 'btnMonth');
            });
            
            // Refresh button animation
            document.getElementById('btnRefresh').addEventListener('click', function() {
                const icon = this.querySelector('i');
                icon.classList.add('rotate-animation');
                setTimeout(() => {
                    icon.classList.remove('rotate-animation');
                }, 1000);
            });
            
            // Helper functions
            function createChart(context, type, labels, data) {
                return new Chart(context, {
                    type: type,
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Orders',
                            data: data,
                            borderColor: '#0d6efd',
                            backgroundColor: type === 'line' ? 'rgba(13, 110, 253, 0.1)' : 'rgba(13, 110, 253, 0.7)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: type === 'line',
                            pointBackgroundColor: '#0d6efd',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            pointRadius: 4,
                            pointHoverRadius: 6
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                padding: 10,
                                titleFont: { size: 14 },
                                bodyFont: { size: 14 },
                                displayColors: false,
                                callbacks: {
                                    label: function(context) {
                                        return `Orders: ${context.raw}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: { 
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.05)'
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                }
                            }
                        }
                    }
                });
            }
            
            function toggleActiveButton(activeId, ...inactiveIds) {
                document.getElementById(activeId).classList.add('active');
                inactiveIds.forEach(id => {
                    document.getElementById(id).classList.remove('active');
                });
            }
        });
    </script>
    
    <style>
        .rotate-animation {
            animation: rotate 1s linear;
        }
        
        @@keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .bg-opacity-10 {
            opacity: 0.1;
        }
        
        .card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }
    </style>
}